// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Bet {
  id          Int      @id(map: "PK_Bets") @default(autoincrement())
  userId      String
  matchId     Int
  homeTeamScore Int
  awayTeamScore Int
  createdAt   DateTime @default(now())

  placedBy User @relation("betPlacedByUser", fields: [userId], references: [id], onUpdate: NoAction, map: "FK_Bet_User")
  onMatch Match @relation("betPlacedOnMatch", fields: [matchId], references: [id], onUpdate: NoAction, map: "FK_Bet_Match")

  @@unique([matchId, userId])
}


model Team {
  id          Int     @id(map: "PK_Team") @default(autoincrement())
  name        String  @db.VarChar(100)
  code        String  @unique(map: "Unique_Team") @db.Char(3)
  homeMatches Match[] @relation("matchAwayTeam")
  awayMatches Match[] @relation("matchHomeTeam")
}


model Match {
  id            Int      @id(map: "PK_Match") @default(autoincrement())
  homeTeamId    Int
  homeTeamScore Int?
  awayTeamId    Int
  awayTeamScore Int?
  startDate     DateTime
  finished      Boolean  @default(false)

  awayTeam      Team     @relation("matchAwayTeam", fields: [awayTeamId], references: [id], onUpdate: NoAction, map: "FK_Match_Away_Team")
  homeTeam      Team     @relation("matchHomeTeam", fields: [homeTeamId], references: [id], onUpdate: NoAction, map: "FK_Match_Home_Team")
  bets Bet[] @relation("betPlacedOnMatch")
}


// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
 
    bets Bet[] @relation("betPlacedByUser")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
